# Firestore Security Rules for Football Scouting Platform

# Default rules (restrictive - blocks all reads/writes):
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

# Recommended rules for development (allows authenticated users):
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow all authenticated users to read/write for development
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}

# Production rules (more secure):
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Training programs - read for all authenticated users, write for admins
    match /trainingPrograms/{programId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin';
    }
    
    // Challenges - read for all authenticated users, write for admins
    match /challenges/{challengeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin';
    }
    
    // Videos - users can read/write their own, admins can read/write all
    match /videos/{videoId} {
      allow read, write: if request.auth != null && 
                            (resource.data.userId == request.auth.uid || 
                             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'admin');
    }
  }
}
